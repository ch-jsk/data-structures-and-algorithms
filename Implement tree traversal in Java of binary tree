// Tree traversal in Java of binary tree

class Node
{
int item;
Node left, right;
public Node(int key)
{
item = key;
left = right = null;
}
}
class BinaryTree
{
// Root of Binary Tree
Node root;
BinaryTree()
{
root = null;
}
void postorder(Node node)
{
if (node == null)
return;
// Traverse left
postorder(node.left);

// Traverse right
postorder(node.right);
// Traverse root
System.out.print(node.item + &quot; &quot;);
}
void inorder(Node node)
{
if (node == null)
return;
// Traverse left
inorder(node.left);
// Traverse root
System.out.print(node.item + &quot; &quot;);
// Traverse right
inorder(node.right);
}
void preorder(Node node)
{
if (node == null)
return;
// Traverse root
System.out.print(node.item + &quot; &quot;);
// Traverse left
preorder(node.left);
// Traverse right
preorder(node.right);
}
public static void main(String[] args)
{
BinaryTree tree = new BinaryTree();
tree.root = new Node(1);

21SE02Ml006
tree.root.left = new Node(12);
tree.root.right = new Node(9);
tree.root.left.left = new Node(5);
tree.root.left.right = new Node(6);
System.out.println(&quot;Inorder traversal&quot;);
tree.inorder(tree.root);
System.out.println(&quot;\nPreorder traversal &quot;);
tree.preorder(tree.root);
System.out.println(&quot;\nPostorder traversal&quot;);
tree.postorder(tree.root);
}
}
